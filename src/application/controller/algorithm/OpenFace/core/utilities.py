# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info

if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_utilities')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_utilities')


    _utilities = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_utilities', [dirname(__file__)])
        except ImportError:
            import _utilities
            return _utilities
        try:
            _mod = imp.load_module('_utilities', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod


    _utilities = swig_import_helper()
    del swig_import_helper
else:
    import _utilities
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import builtins


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass


    _newclass = 0


class ImageCapture(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageCapture, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageCapture, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _utilities.new_ImageCapture()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Open(self, arguments):
        return _utilities.ImageCapture_Open(self, arguments)

    def OpenDirectory(self, *args):
        return _utilities.ImageCapture_OpenDirectory(self, *args)

    def OpenImageFiles(self, image_files, fx=-1, fy=-1, cx=-1, cy=-1):
        return _utilities.ImageCapture_OpenImageFiles(self, image_files, fx, fy, cx, cy)

    def GetNextImage(self):
        return _utilities.ImageCapture_GetNextImage(self)

    def GetGrayFrame(self):
        return _utilities.ImageCapture_GetGrayFrame(self)

    def GetBoundingBoxes(self):
        return _utilities.ImageCapture_GetBoundingBoxes(self)

    def GetProgress(self):
        return _utilities.ImageCapture_GetProgress(self)

    __swig_setmethods__["image_width"] = _utilities.ImageCapture_image_width_set
    __swig_getmethods__["image_width"] = _utilities.ImageCapture_image_width_get
    if _newclass:
        image_width = _swig_property(_utilities.ImageCapture_image_width_get, _utilities.ImageCapture_image_width_set)
    __swig_setmethods__["image_height"] = _utilities.ImageCapture_image_height_set
    __swig_getmethods__["image_height"] = _utilities.ImageCapture_image_height_get
    if _newclass:
        image_height = _swig_property(_utilities.ImageCapture_image_height_get,
                                      _utilities.ImageCapture_image_height_set)
    __swig_setmethods__["fx"] = _utilities.ImageCapture_fx_set
    __swig_getmethods__["fx"] = _utilities.ImageCapture_fx_get
    if _newclass:
        fx = _swig_property(_utilities.ImageCapture_fx_get, _utilities.ImageCapture_fx_set)
    __swig_setmethods__["fy"] = _utilities.ImageCapture_fy_set
    __swig_getmethods__["fy"] = _utilities.ImageCapture_fy_get
    if _newclass:
        fy = _swig_property(_utilities.ImageCapture_fy_get, _utilities.ImageCapture_fy_set)
    __swig_setmethods__["cx"] = _utilities.ImageCapture_cx_set
    __swig_getmethods__["cx"] = _utilities.ImageCapture_cx_get
    if _newclass:
        cx = _swig_property(_utilities.ImageCapture_cx_get, _utilities.ImageCapture_cx_set)
    __swig_setmethods__["cy"] = _utilities.ImageCapture_cy_set
    __swig_getmethods__["cy"] = _utilities.ImageCapture_cy_get
    if _newclass:
        cy = _swig_property(_utilities.ImageCapture_cy_get, _utilities.ImageCapture_cy_set)
    __swig_setmethods__["name"] = _utilities.ImageCapture_name_set
    __swig_getmethods__["name"] = _utilities.ImageCapture_name_get
    if _newclass:
        name = _swig_property(_utilities.ImageCapture_name_get, _utilities.ImageCapture_name_set)
    __swig_setmethods__["has_bounding_boxes"] = _utilities.ImageCapture_has_bounding_boxes_set
    __swig_getmethods__["has_bounding_boxes"] = _utilities.ImageCapture_has_bounding_boxes_get
    if _newclass:
        has_bounding_boxes = _swig_property(_utilities.ImageCapture_has_bounding_boxes_get,
                                            _utilities.ImageCapture_has_bounding_boxes_set)
    __swig_destroy__ = _utilities.delete_ImageCapture
    __del__ = lambda self: None


ImageCapture_swigregister = _utilities.ImageCapture_swigregister
ImageCapture_swigregister(ImageCapture)


def ConvertToGrayscale_8bit(arg1, out):
    return _utilities.ConvertToGrayscale_8bit(arg1, out)


ConvertToGrayscale_8bit = _utilities.ConvertToGrayscale_8bit


class RecorderCSV(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RecorderCSV, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RecorderCSV, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _utilities.new_RecorderCSV()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Open(self, output_file_name, is_sequence, output_2D_landmarks, output_3D_landmarks, output_model_params,
             output_pose, output_AUs, output_gaze, num_face_landmarks, num_model_modes, num_eye_landmarks,
             au_names_class, au_names_reg):
        return _utilities.RecorderCSV_Open(self, output_file_name, is_sequence, output_2D_landmarks,
                                           output_3D_landmarks, output_model_params, output_pose, output_AUs,
                                           output_gaze, num_face_landmarks, num_model_modes, num_eye_landmarks,
                                           au_names_class, au_names_reg)

    def isOpen(self):
        return _utilities.RecorderCSV_isOpen(self)

    def Close(self):
        return _utilities.RecorderCSV_Close(self)

    def WriteLine(self, face_id, frame_num, time_stamp, landmark_detection_success, landmark_confidence, landmarks_2D,
                  landmarks_3D, pdm_model_params, rigid_shape_params, pose_estimate, gazeDirection0, gazeDirection1,
                  gaze_angle, eye_landmarks2d, eye_landmarks3d, au_intensities, au_occurences):
        return _utilities.RecorderCSV_WriteLine(self, face_id, frame_num, time_stamp, landmark_detection_success,
                                                landmark_confidence, landmarks_2D, landmarks_3D, pdm_model_params,
                                                rigid_shape_params, pose_estimate, gazeDirection0, gazeDirection1,
                                                gaze_angle, eye_landmarks2d, eye_landmarks3d, au_intensities,
                                                au_occurences)

    __swig_destroy__ = _utilities.delete_RecorderCSV
    __del__ = lambda self: None


RecorderCSV_swigregister = _utilities.RecorderCSV_swigregister
RecorderCSV_swigregister(RecorderCSV)


class RecorderHOG(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RecorderHOG, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RecorderHOG, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _utilities.new_RecorderHOG()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetObservationHOG(self, success, hog_descriptor, num_cols, num_rows, num_channels):
        return _utilities.RecorderHOG_SetObservationHOG(self, success, hog_descriptor, num_cols, num_rows, num_channels)

    def Write(self):
        return _utilities.RecorderHOG_Write(self)

    def Open(self, filename):
        return _utilities.RecorderHOG_Open(self, filename)

    def Close(self):
        return _utilities.RecorderHOG_Close(self)

    __swig_destroy__ = _utilities.delete_RecorderHOG
    __del__ = lambda self: None


RecorderHOG_swigregister = _utilities.RecorderHOG_swigregister
RecorderHOG_swigregister(RecorderHOG)


class RecorderOpenFace(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RecorderOpenFace, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RecorderOpenFace, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _utilities.new_RecorderOpenFace(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    __swig_destroy__ = _utilities.delete_RecorderOpenFace
    __del__ = lambda self: None

    def Close(self):
        return _utilities.RecorderOpenFace_Close(self)

    def SetObservationTimestamp(self, timestamp):
        return _utilities.RecorderOpenFace_SetObservationTimestamp(self, timestamp)

    def SetObservationFrameNumber(self, frame_number):
        return _utilities.RecorderOpenFace_SetObservationFrameNumber(self, frame_number)

    def SetObservationFaceID(self, face_id):
        return _utilities.RecorderOpenFace_SetObservationFaceID(self, face_id)

    def SetObservationLandmarks(self, landmarks_2D, landmarks_3D, params_global, params_local, confidence, success):
        return _utilities.RecorderOpenFace_SetObservationLandmarks(self, landmarks_2D, landmarks_3D, params_global,
                                                                   params_local, confidence, success)

    def SetObservationPose(self, pose):
        return _utilities.RecorderOpenFace_SetObservationPose(self, pose)

    def SetObservationActionUnits(self, au_intensities, au_occurences):
        return _utilities.RecorderOpenFace_SetObservationActionUnits(self, au_intensities, au_occurences)

    def SetObservationGaze(self, gazeDirection0, gazeDirection1, gaze_angle, eye_landmarks2D, eye_landmarks3D):
        return _utilities.RecorderOpenFace_SetObservationGaze(self, gazeDirection0, gazeDirection1, gaze_angle,
                                                              eye_landmarks2D, eye_landmarks3D)

    def SetObservationFaceAlign(self, aligned_face):
        return _utilities.RecorderOpenFace_SetObservationFaceAlign(self, aligned_face)

    def SetObservationHOG(self, good_frame, hog_descriptor, num_cols, num_rows, num_channels):
        return _utilities.RecorderOpenFace_SetObservationHOG(self, good_frame, hog_descriptor, num_cols, num_rows,
                                                             num_channels)

    def SetObservationVisualization(self, vis_track):
        return _utilities.RecorderOpenFace_SetObservationVisualization(self, vis_track)

    def WriteObservation(self):
        return _utilities.RecorderOpenFace_WriteObservation(self)

    def WriteObservationTracked(self):
        return _utilities.RecorderOpenFace_WriteObservationTracked(self)

    def GetCSVFile(self):
        return _utilities.RecorderOpenFace_GetCSVFile(self)


RecorderOpenFace_swigregister = _utilities.RecorderOpenFace_swigregister
RecorderOpenFace_swigregister(RecorderOpenFace)


class RecorderOpenFaceParameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RecorderOpenFaceParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RecorderOpenFaceParameters, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _utilities.new_RecorderOpenFaceParameters(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def isSequence(self):
        return _utilities.RecorderOpenFaceParameters_isSequence(self)

    def isFromWebcam(self):
        return _utilities.RecorderOpenFaceParameters_isFromWebcam(self)

    def output2DLandmarks(self):
        return _utilities.RecorderOpenFaceParameters_output2DLandmarks(self)

    def output3DLandmarks(self):
        return _utilities.RecorderOpenFaceParameters_output3DLandmarks(self)

    def outputPDMParams(self):
        return _utilities.RecorderOpenFaceParameters_outputPDMParams(self)

    def outputPose(self):
        return _utilities.RecorderOpenFaceParameters_outputPose(self)

    def outputAUs(self):
        return _utilities.RecorderOpenFaceParameters_outputAUs(self)

    def outputGaze(self):
        return _utilities.RecorderOpenFaceParameters_outputGaze(self)

    def outputHOG(self):
        return _utilities.RecorderOpenFaceParameters_outputHOG(self)

    def outputTracked(self):
        return _utilities.RecorderOpenFaceParameters_outputTracked(self)

    def outputAlignedFaces(self):
        return _utilities.RecorderOpenFaceParameters_outputAlignedFaces(self)

    def outputCodec(self):
        return _utilities.RecorderOpenFaceParameters_outputCodec(self)

    def outputFps(self):
        return _utilities.RecorderOpenFaceParameters_outputFps(self)

    def outputBadAligned(self):
        return _utilities.RecorderOpenFaceParameters_outputBadAligned(self)

    def getFx(self):
        return _utilities.RecorderOpenFaceParameters_getFx(self)

    def getFy(self):
        return _utilities.RecorderOpenFaceParameters_getFy(self)

    def getCx(self):
        return _utilities.RecorderOpenFaceParameters_getCx(self)

    def getCy(self):
        return _utilities.RecorderOpenFaceParameters_getCy(self)

    def setOutputAUs(self, output_AUs):
        return _utilities.RecorderOpenFaceParameters_setOutputAUs(self, output_AUs)

    def setOutputGaze(self, output_gaze):
        return _utilities.RecorderOpenFaceParameters_setOutputGaze(self, output_gaze)

    __swig_destroy__ = _utilities.delete_RecorderOpenFaceParameters
    __del__ = lambda self: None


RecorderOpenFaceParameters_swigregister = _utilities.RecorderOpenFaceParameters_swigregister
RecorderOpenFaceParameters_swigregister(RecorderOpenFaceParameters)


def Euler2RotationMatrix(eulerAngles):
    return _utilities.Euler2RotationMatrix(eulerAngles)


Euler2RotationMatrix = _utilities.Euler2RotationMatrix


def RotationMatrix2Euler(rotation_matrix):
    return _utilities.RotationMatrix2Euler(rotation_matrix)


RotationMatrix2Euler = _utilities.RotationMatrix2Euler


def Euler2AxisAngle(euler):
    return _utilities.Euler2AxisAngle(euler)


Euler2AxisAngle = _utilities.Euler2AxisAngle


def AxisAngle2Euler(axis_angle):
    return _utilities.AxisAngle2Euler(axis_angle)


AxisAngle2Euler = _utilities.AxisAngle2Euler


def AxisAngle2RotationMatrix(axis_angle):
    return _utilities.AxisAngle2RotationMatrix(axis_angle)


AxisAngle2RotationMatrix = _utilities.AxisAngle2RotationMatrix


def RotationMatrix2AxisAngle(rotation_matrix):
    return _utilities.RotationMatrix2AxisAngle(rotation_matrix)


RotationMatrix2AxisAngle = _utilities.RotationMatrix2AxisAngle


def Project(dest, mesh, fx, fy, cx, cy):
    return _utilities.Project(dest, mesh, fx, fy, cx, cy)


Project = _utilities.Project


def AlignShapesKabsch2D(align_from, align_to):
    return _utilities.AlignShapesKabsch2D(align_from, align_to)


AlignShapesKabsch2D = _utilities.AlignShapesKabsch2D


def AlignShapesWithScale(src, dst):
    return _utilities.AlignShapesWithScale(src, dst)


AlignShapesWithScale = _utilities.AlignShapesWithScale


class SequenceCapture(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SequenceCapture, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SequenceCapture, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _utilities.new_SequenceCapture()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    __swig_destroy__ = _utilities.delete_SequenceCapture
    __del__ = lambda self: None

    def Open(self, arguments):
        return _utilities.SequenceCapture_Open(self, arguments)

    def OpenWebcam(self, device_id, image_width=640, image_height=480, fx=-1, fy=-1, cx=-1, cy=-1):
        return _utilities.SequenceCapture_OpenWebcam(self, device_id, image_width, image_height, fx, fy, cx, cy)

    def OpenImageSequence(self, directory, fx=-1, fy=-1, cx=-1, cy=-1):
        return _utilities.SequenceCapture_OpenImageSequence(self, directory, fx, fy, cx, cy)

    def OpenVideoFile(self, video_file, fx=-1, fy=-1, cx=-1, cy=-1):
        return _utilities.SequenceCapture_OpenVideoFile(self, video_file, fx, fy, cx, cy)

    def IsWebcam(self):
        return _utilities.SequenceCapture_IsWebcam(self)

    def GetNextFrame(self):
        return _utilities.SequenceCapture_GetNextFrame(self)

    def GetGrayFrame(self):
        return _utilities.SequenceCapture_GetGrayFrame(self)

    def GetProgress(self):
        return _utilities.SequenceCapture_GetProgress(self)

    def GetFrameNumber(self):
        return _utilities.SequenceCapture_GetFrameNumber(self)

    def IsOpened(self):
        return _utilities.SequenceCapture_IsOpened(self)

    def Close(self):
        return _utilities.SequenceCapture_Close(self)

    __swig_setmethods__["frame_width"] = _utilities.SequenceCapture_frame_width_set
    __swig_getmethods__["frame_width"] = _utilities.SequenceCapture_frame_width_get
    if _newclass:
        frame_width = _swig_property(_utilities.SequenceCapture_frame_width_get,
                                     _utilities.SequenceCapture_frame_width_set)
    __swig_setmethods__["frame_height"] = _utilities.SequenceCapture_frame_height_set
    __swig_getmethods__["frame_height"] = _utilities.SequenceCapture_frame_height_get
    if _newclass:
        frame_height = _swig_property(_utilities.SequenceCapture_frame_height_get,
                                      _utilities.SequenceCapture_frame_height_set)
    __swig_setmethods__["fx"] = _utilities.SequenceCapture_fx_set
    __swig_getmethods__["fx"] = _utilities.SequenceCapture_fx_get
    if _newclass:
        fx = _swig_property(_utilities.SequenceCapture_fx_get, _utilities.SequenceCapture_fx_set)
    __swig_setmethods__["fy"] = _utilities.SequenceCapture_fy_set
    __swig_getmethods__["fy"] = _utilities.SequenceCapture_fy_get
    if _newclass:
        fy = _swig_property(_utilities.SequenceCapture_fy_get, _utilities.SequenceCapture_fy_set)
    __swig_setmethods__["cx"] = _utilities.SequenceCapture_cx_set
    __swig_getmethods__["cx"] = _utilities.SequenceCapture_cx_get
    if _newclass:
        cx = _swig_property(_utilities.SequenceCapture_cx_get, _utilities.SequenceCapture_cx_set)
    __swig_setmethods__["cy"] = _utilities.SequenceCapture_cy_set
    __swig_getmethods__["cy"] = _utilities.SequenceCapture_cy_get
    if _newclass:
        cy = _swig_property(_utilities.SequenceCapture_cy_get, _utilities.SequenceCapture_cy_set)
    __swig_setmethods__["fps"] = _utilities.SequenceCapture_fps_set
    __swig_getmethods__["fps"] = _utilities.SequenceCapture_fps_get
    if _newclass:
        fps = _swig_property(_utilities.SequenceCapture_fps_get, _utilities.SequenceCapture_fps_set)
    __swig_setmethods__["time_stamp"] = _utilities.SequenceCapture_time_stamp_set
    __swig_getmethods__["time_stamp"] = _utilities.SequenceCapture_time_stamp_get
    if _newclass:
        time_stamp = _swig_property(_utilities.SequenceCapture_time_stamp_get,
                                    _utilities.SequenceCapture_time_stamp_set)
    __swig_setmethods__["name"] = _utilities.SequenceCapture_name_set
    __swig_getmethods__["name"] = _utilities.SequenceCapture_name_get
    if _newclass:
        name = _swig_property(_utilities.SequenceCapture_name_get, _utilities.SequenceCapture_name_set)
    __swig_setmethods__["no_input_specified"] = _utilities.SequenceCapture_no_input_specified_set
    __swig_getmethods__["no_input_specified"] = _utilities.SequenceCapture_no_input_specified_get
    if _newclass:
        no_input_specified = _swig_property(_utilities.SequenceCapture_no_input_specified_get,
                                            _utilities.SequenceCapture_no_input_specified_set)


SequenceCapture_swigregister = _utilities.SequenceCapture_swigregister
SequenceCapture_swigregister(SequenceCapture)


def DrawBox(*args):
    return _utilities.DrawBox(*args)


DrawBox = _utilities.DrawBox


def CalculateBox(pose, fx, fy, cx, cy):
    return _utilities.CalculateBox(pose, fx, fy, cx, cy)


CalculateBox = _utilities.CalculateBox


def Visualise_FHOG(descriptor, num_rows, num_cols, visualisation):
    return _utilities.Visualise_FHOG(descriptor, num_rows, num_cols, visualisation)


Visualise_FHOG = _utilities.Visualise_FHOG


class FpsTracker(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FpsTracker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FpsTracker, name)
    __repr__ = _swig_repr
    __swig_setmethods__["history_length"] = _utilities.FpsTracker_history_length_set
    __swig_getmethods__["history_length"] = _utilities.FpsTracker_history_length_get
    if _newclass:
        history_length = _swig_property(_utilities.FpsTracker_history_length_get,
                                        _utilities.FpsTracker_history_length_set)

    def AddFrame(self):
        return _utilities.FpsTracker_AddFrame(self)

    def GetFPS(self):
        return _utilities.FpsTracker_GetFPS(self)

    def __init__(self):
        this = _utilities.new_FpsTracker()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    __swig_destroy__ = _utilities.delete_FpsTracker
    __del__ = lambda self: None


FpsTracker_swigregister = _utilities.FpsTracker_swigregister
FpsTracker_swigregister(FpsTracker)


class Visualizer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Visualizer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Visualizer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _utilities.new_Visualizer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetImage(self, canvas, fx, fy, cx, cy):
        return _utilities.Visualizer_SetImage(self, canvas, fx, fy, cx, cy)

    def SetObservationLandmarks(self, *args):
        return _utilities.Visualizer_SetObservationLandmarks(self, *args)

    def SetObservationPose(self, pose, confidence):
        return _utilities.Visualizer_SetObservationPose(self, pose, confidence)

    def SetObservationActionUnits(self, au_intensities, au_occurences):
        return _utilities.Visualizer_SetObservationActionUnits(self, au_intensities, au_occurences)

    def SetObservationGaze(self, gazeDirection0, gazeDirection1, eye_landmarks, eye_landmarks3d, confidence):
        return _utilities.Visualizer_SetObservationGaze(self, gazeDirection0, gazeDirection1, eye_landmarks,
                                                        eye_landmarks3d, confidence)

    def SetObservationFaceAlign(self, aligned_face):
        return _utilities.Visualizer_SetObservationFaceAlign(self, aligned_face)

    def SetObservationHOG(self, hog_descriptor, num_cols, num_rows):
        return _utilities.Visualizer_SetObservationHOG(self, hog_descriptor, num_cols, num_rows)

    def SetFps(self, fps):
        return _utilities.Visualizer_SetFps(self, fps)

    def ShowObservation(self):
        return _utilities.Visualizer_ShowObservation(self)

    def GetVisImage(self):
        return _utilities.Visualizer_GetVisImage(self)

    def GetHOGVis(self):
        return _utilities.Visualizer_GetHOGVis(self)

    __swig_setmethods__["vis_track"] = _utilities.Visualizer_vis_track_set
    __swig_getmethods__["vis_track"] = _utilities.Visualizer_vis_track_get
    if _newclass:
        vis_track = _swig_property(_utilities.Visualizer_vis_track_get, _utilities.Visualizer_vis_track_set)
    __swig_setmethods__["vis_hog"] = _utilities.Visualizer_vis_hog_set
    __swig_getmethods__["vis_hog"] = _utilities.Visualizer_vis_hog_get
    if _newclass:
        vis_hog = _swig_property(_utilities.Visualizer_vis_hog_get, _utilities.Visualizer_vis_hog_set)
    __swig_setmethods__["vis_align"] = _utilities.Visualizer_vis_align_set
    __swig_getmethods__["vis_align"] = _utilities.Visualizer_vis_align_get
    if _newclass:
        vis_align = _swig_property(_utilities.Visualizer_vis_align_get, _utilities.Visualizer_vis_align_set)
    __swig_setmethods__["vis_aus"] = _utilities.Visualizer_vis_aus_set
    __swig_getmethods__["vis_aus"] = _utilities.Visualizer_vis_aus_get
    if _newclass:
        vis_aus = _swig_property(_utilities.Visualizer_vis_aus_get, _utilities.Visualizer_vis_aus_set)
    __swig_setmethods__["visualisation_boundary"] = _utilities.Visualizer_visualisation_boundary_set
    __swig_getmethods__["visualisation_boundary"] = _utilities.Visualizer_visualisation_boundary_get
    if _newclass:
        visualisation_boundary = _swig_property(_utilities.Visualizer_visualisation_boundary_get,
                                                _utilities.Visualizer_visualisation_boundary_set)
    __swig_destroy__ = _utilities.delete_Visualizer
    __del__ = lambda self: None


Visualizer_swigregister = _utilities.Visualizer_swigregister
Visualizer_swigregister(Visualizer)


def testcv():
    return _utilities.testcv()


testcv = _utilities.testcv
# This file is compatible with both classic and new-style classes.
